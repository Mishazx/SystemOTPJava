package ru.mishazx.systemotpjava.smpp;

import org.jsmpp.bean.*;
import org.jsmpp.extra.ProcessRequestException;
import org.jsmpp.session.DataSmResult;
import org.jsmpp.session.MessageReceiverListener;
import org.jsmpp.session.Session;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;

@Component
@ConditionalOnProperty(name = "smpp.enabled", havingValue = "true", matchIfMissing = false)
public class MessageReceiverListenerImpl implements MessageReceiverListener {
    private static final Logger logger = LoggerFactory.getLogger(MessageReceiverListenerImpl.class);

    @Override
    public void onAcceptDeliverSm(DeliverSm deliverSm) throws ProcessRequestException {
        if (deliverSm.isSmscDeliveryReceipt()) {
            // Это отчёт о доставке
            try {
                DeliveryReceipt deliveryReceipt = deliverSm.getShortMessageAsDeliveryReceipt();
                logger.info("Получен отчёт о доставке: {}", deliveryReceipt);
            } catch (Exception e) {
                logger.error("Ошибка при обработке отчёта о доставке", e);
            }
        } else {
            // Это обычное SMS сообщение
            String sourceAddr = deliverSm.getSourceAddr();
            String message = new String(deliverSm.getShortMessage());
            logger.info("Получено SMS от {}: {}", sourceAddr, message);
        }
    }

    @Override
    public void onAcceptAlertNotification(AlertNotification alertNotification) {
        logger.info("Получено уведомление: {}", alertNotification);
    }

    @Override
    public DataSmResult onAcceptDataSm(DataSm dataSm, Session session) throws ProcessRequestException {
        logger.info("Получены данные: {}", dataSm);
        return null; // Возвращаем null, так как не обрабатываем этот тип сообщений
    }
} 